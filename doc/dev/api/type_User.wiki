<<code language="ocaml" | sig
  exception ConnectionRefused
  exception BadPassword
  exception BadUser
  exception UnknownUser of string
  exception UseAuth of User_sql.Types.userid
  val anonymous : User_sql.Types.userid
  val anonymous_login : string
  val admin : User_sql.Types.userid
  val admin_login : string
  val nobody : User_sql.Types.userid
  val nobody_login : string
  val authenticated_users : User_sql.Types.userid
  val group_can_create_groups : User_sql.Types.user
  val group_can_create_users : User_sql.Types.user
  val group_can_admin_users : User_sql.Types.user
  val group_can_admin_group : [ `User ] User_sql.Types.parameterized_group
  val get_basicuser_by_login : string -> User_sql.Types.userid Lwt.t
  val get_user_by_name : string -> User_sql.Types.user Lwt.t
  val user_list_of_string : string -> User_sql.Types.user list Lwt.t
  val create_user :
    name:string ->
    pwd:User_sql.Types.pwd ->
    fullname:string ->
    ?email:string ->
    ?test:(unit -> bool Lwt.t) -> unit -> User_sql.Types.userid Lwt.t
  val create_fresh_user :
    name:string ->
    pwd:User_sql.Types.pwd ->
    fullname:string -> ?email:string -> unit -> User_sql.Types.userid Lwt.t
  val create_external_user : string -> User_sql.Types.userid Lwt.t
  val authenticate :
    name:string -> pwd:string -> User_sql.Types.userdata Lwt.t
  val add_to_group :
    user:User_sql.Types.user -> group:User_sql.Types.user -> unit Lwt.t
  val remove_from_group :
    user:User_sql.Types.user -> group:User_sql.Types.user -> unit Lwt.t
  val add_to_groups :
    user:User_sql.Types.user -> groups:User_sql.Types.user list -> unit Lwt.t
  val add_list_to_group :
    l:User_sql.Types.user list -> group:User_sql.Types.user -> unit Lwt.t
  val remove_list_from_group :
    l:User_sql.Types.user list -> group:User_sql.Types.user -> unit Lwt.t
  val in_group :
    ?user:User_sql.Types.user ->
    group:User_sql.Types.user -> unit -> bool Lwt.t
  val get_user_data : unit -> User_sql.Types.userdata Lwt.t
  val get_user_id : unit -> User_sql.Types.userid Lwt.t
  val get_user_name : unit -> string Lwt.t
  val is_logged_on : unit -> bool Lwt.t
  val set_session_data : User_sql.Types.userid * string -> unit Lwt.t
  val user_from_userlogin_xform :
    string -> User_sql.Types.user Xform.convert Lwt.t
  module GenericRights :
    sig
      type admin_writer_reader_access = {
        field :
          'a.
            'a User_sql.Types.admin_writer_reader ->
            'a User_sql.Types.parameterized_group;
      }
      val grp_admin : User.GenericRights.admin_writer_reader_access
      val grp_write : User.GenericRights.admin_writer_reader_access
      val grp_read : User.GenericRights.admin_writer_reader_access
      val map_awr :
        (User.GenericRights.admin_writer_reader_access -> 'a) -> 'a * 'a * 'a
      val map_awr_lwt :
        (User.GenericRights.admin_writer_reader_access -> 'a Lwt.t) ->
        ('a * 'a * 'a) Lwt.t
      val iter_awr_lwt :
        (User.GenericRights.admin_writer_reader_access -> unit Lwt.t) ->
        unit Lwt.t
      val create_admin_writer_reader :
        prefix:string ->
        name:string ->
        descr:string ->
        find_param:User_sql.Types.find_param ->
        'a User_sql.Types.admin_writer_reader
      val admin_writer_reader_groups :
        'a User_sql.Types.admin_writer_reader ->
        ('a Opaque.int32_t -> User_sql.Types.user) *
        ('a Opaque.int32_t -> User_sql.Types.user) *
        ('a Opaque.int32_t -> User_sql.Types.user)
    end
end >>