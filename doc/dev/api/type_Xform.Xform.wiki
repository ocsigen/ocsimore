<<code language="ocaml" | sig
  type 'a monad
  type (+'html, +'o) t
  val id : ('a, 'b) Xform.Xform.t -> string
  val string_input :
    ?a:Html5_types.input_attrib Eliom_content.Html5.F.attrib list ->
    string ->
    ([> Html5_types.input ] Eliom_content.Html5.F.elt, string) Xform.Xform.t
  val string_opt_input :
    ?a:Html5_types.input_attrib Eliom_content.Html5.F.attrib list ->
    string option ->
    ([> Html5_types.input ] Eliom_content.Html5.F.elt, string option)
    Xform.Xform.t
  val int_input :
    ?a:Html5_types.input_attrib Eliom_content.Html5.F.attrib list ->
    ?format:(int -> string) ->
    int -> ([> `Input | `Span ] Eliom_content.Html5.F.elt, int) Xform.Xform.t
  val bounded_int_input :
    ?format:(int -> string) ->
    int ->
    int ->
    int -> ([> `Input | `Span ] Eliom_content.Html5.F.elt, int) Xform.Xform.t
  val bool_checkbox :
    ?a:Html5_types.input_attrib Eliom_content.Html5.F.attrib list ->
    bool ->
    ([> Html5_types.input ] Eliom_content.Html5.F.elt, bool) Xform.Xform.t
  val text_area :
    ?a:Html5_types.textarea_attrib Eliom_content.Html5.F.attrib list ->
    string ->
    ([> Html5_types.textarea ] Eliom_content.Html5.F.elt, string)
    Xform.Xform.t
  val submit_button :
    string ->
    ([> Html5_types.input ] Eliom_content.Html5.F.elt, bool) Xform.Xform.t
  val select_single :
    (string * string) list ->
    string ->
    ([> Html5_types.select ] Eliom_content.Html5.F.elt, string) Xform.Xform.t
  val list :
    'i list ->
    ('i ->
     ([< Html5_types.form_content ] Eliom_content.Html5.F.elt, 'o)
     Xform.Xform.t) ->
    ([> Html5_types.form_content ] Eliom_content.Html5.F.elt, 'o list)
    Xform.Xform.t
  val list' :
    int ->
    ([< Html5_types.form_content ] Eliom_content.Html5.F.elt, 'o)
    Xform.Xform.t ->
    ([> Html5_types.form_content ] Eliom_content.Html5.F.elt, 'o list)
    Xform.Xform.t
  val extensible_list :
    string ->
    'i ->
    'i list ->
    ('i ->
     ([< Html5_types.form_content ] Eliom_content.Html5.F.elt, 'o)
     Xform.Xform.t) ->
    ([> Html5_types.form_content ] Eliom_content.Html5.F.elt, 'o list)
    Xform.Xform.t
  val opt_input :
    input:('a ->
           (([> Html5_types.input ] as 'c) Eliom_content.Html5.F.elt, 'b)
           Xform.Xform.t) ->
    default:'a ->
    'a option -> ('c Eliom_content.Html5.F.elt, 'b option) Xform.Xform.t
  module Ops :
    sig
      val ( @@ ) :
        ('elt, 'o1) Xform.Xform.t ->
        ('elt, 'o2) Xform.Xform.t -> ('elt, 'o1 * 'o2) Xform.Xform.t
      val ( +@ ) :
        ('a, 'b) Xform.Xform.t -> 'a list -> ('a, 'b) Xform.Xform.t
      val ( @+ ) :
        'a list -> ('a, 'b) Xform.Xform.t -> ('a, 'b) Xform.Xform.t
      val ( |> ) :
        ('html, 'o1) Xform.Xform.t ->
        ('o1 -> 'o2) -> ('html, 'o2) Xform.Xform.t
      val ( ||> ) :
        ('html, 'o1) Xform.Xform.t ->
        ('o1 -> 'o2 Xform.Xform.monad) -> ('html, 'o2) Xform.Xform.t
    end
  val wrap :
    ('html1 list -> 'html2 list) ->
    ('html1, 'o) Xform.Xform.t -> ('html2, 'o) Xform.Xform.t
  val check :
    (([> Html5_types.span ] as 'b) Eliom_content.Html5.F.elt, 'a)
    Xform.Xform.t ->
    ('a -> string option) -> ('b Eliom_content.Html5.F.elt, 'a) Xform.Xform.t
  val convert :
    (([> Html5_types.span ] as 'c) Eliom_content.Html5.F.elt, 'a)
    Xform.Xform.t ->
    ('a -> 'b Xform.convert Xform.Xform.monad) ->
    ('c Eliom_content.Html5.F.elt, 'b) Xform.Xform.t
  val hour_input :
    int ->
    int ->
    ([> `Input | `PCDATA | `Span ] Eliom_content.Html5.F.elt, int * int)
    Xform.Xform.t
  val day_input :
    int ->
    int ->
    int ->
    ([> `Input | `PCDATA | `Span ] Eliom_content.Html5.F.elt,
     int * int * int)
    Xform.Xform.t
  val date_input :
    CalendarLib.Calendar.t ->
    ([> `Input | `PCDATA | `Span ] Eliom_content.Html5.F.elt,
     CalendarLib.Calendar.t)
    Xform.Xform.t
  val text : string -> [> Html5_types.pcdata ] Eliom_content.Html5.F.elt list
  val strong :
    [< Html5_types.strong_content_fun ] Eliom_content.Html5.F.elt list ->
    [> Html5_types.strong ] Eliom_content.Html5.F.elt
  val p :
    ([< Html5_types.p_content_fun ] Eliom_content.Html5.F.elt, 'b)
    Xform.Xform.t ->
    ([> Html5_types.p ] Eliom_content.Html5.F.elt, 'b) Xform.Xform.t
  val table :
    ([< Html5_types.table_content_fun ] Eliom_content.Html5.F.elt, 'b)
    Xform.Xform.t ->
    ([> Html5_types.table ] Eliom_content.Html5.F.elt, 'b) Xform.Xform.t
  val tr :
    ([< Html5_types.tr_content_fun ] Eliom_content.Html5.F.elt, 'b)
    Xform.Xform.t ->
    ([> Html5_types.tr ] Eliom_content.Html5.F.elt, 'b) Xform.Xform.t
  val td :
    ([< Html5_types.td_content_fun ] Eliom_content.Html5.F.elt, 'b)
    Xform.Xform.t ->
    ([> Html5_types.td ] Eliom_content.Html5.F.elt, 'b) Xform.Xform.t
  val label_input_tr :
    label:string ->
    ?description:string ->
    ([< Html5_types.td_content_fun ] Eliom_content.Html5.F.elt, 'b)
    Xform.Xform.t ->
    (Html5_types.tr Eliom_content.Html5.F.elt, 'b) Xform.Xform.t
  val fieldset :
    ?legend:[ `Legend ] Eliom_content.Html5.F.elt ->
    ([< Html5_types.flow5 ] Eliom_content.Html5.F.elt, 'b) Xform.Xform.t ->
    ([> Html5_types.fieldset ] Eliom_content.Html5.F.elt, 'b) Xform.Xform.t
  val form :
    fallback:('a, unit, [ `Get ], Eliom_service.attached_kind,
              [< `AttachedCoservice | `Service ], [< Eliom_service.suff ],
              'b, unit, [< `Registrable ], Eliom_registration.http_service)
             Eliom_service.service ->
    get_args:'a ->
    page:('a ->
          Xform.error ->
          [> Html5_types.form ] Eliom_content.Html5.F.elt ->
          Eliom_content.Html5.F.html Lwt.t) ->
    ?err_handler:(exn -> string option) ->
    (Html5_types.form_content Eliom_content.Html5.F.elt,
     unit -> Eliom_registration.Html5.page Lwt.t)
    Xform.Xform.t ->
    [> Html5_types.form ] Eliom_content.Html5.F.elt Xform.Xform.monad
end >>